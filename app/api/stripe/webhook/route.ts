import { NextResponse } from "next/server";
import { headers } from "next/headers";
import Stripe from "stripe";
import { prisma } from "@/lib/db";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Stripe —Å –≤–∞—à–∏–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2024-12-18.acacia", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é API
});

// –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç –≤–µ–±—Ö—É–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET!;

export async function POST(req: Request) {
  try {
    console.log("=== WEBHOOK RECEIVED ===");
    
    const body = await req.text();
    const headersList = await headers();
    const signature = headersList.get("stripe-signature") as string;

    console.log("Body length:", body.length);
    console.log("Signature present:", !!signature);

    let event: Stripe.Event;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–µ–ª –æ—Ç Stripe
      event = stripe.webhooks.constructEvent(body, signature, webhookSecret);
      console.log("‚úÖ Webhook signature verified successfully");
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown error';
      console.error(`‚ùå Webhook signature verification failed: ${errorMessage}`);
      return new Response(`Webhook Error: ${errorMessage}`, { status: 400 });
    }

    // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    console.log(`‚úÖ Webhook received and verified: ${event.id}, type: ${event.type}`);

    switch (event.type) {
      case "checkout.session.completed":
        const session = event.data.object as Stripe.Checkout.Session;
        console.log("üéâ Checkout Session Completed!");
        console.log("Session ID:", session.id);
        console.log("User ID:", session.metadata?.userId);
        console.log("Tokens:", session.metadata?.tokens);
        console.log("Amount:", session.metadata?.amount);
        console.log("Region:", session.metadata?.region);

        try {
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
          const { userId, tokens, amount, region, source } = session.metadata || {};
          
          if (!userId || !tokens) {
            console.error("‚ùå Missing required metadata: userId or tokens");
            return NextResponse.json({ error: "Missing metadata" }, { status: 400 });
          }

          const tokenAmount = parseInt(tokens);
          const paymentAmount = parseFloat(amount || "0");

          console.log("Processing payment:", {
            userId,
            tokenAmount,
            paymentAmount,
            region,
            source
          });

          // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          const transaction = await prisma.transaction.create({
            data: {
              userId: userId,
              type: "topup",
              amount: tokenAmount,
              meta: JSON.stringify({
                reason: "stripe_payment",
                sessionId: session.id,
                stripeAmount: session.amount_total,
                currency: session.currency,
                userAmount: paymentAmount,
                region: region,
                source: source,
                tokensCredited: tokenAmount,
                webhookId: event.id,
                processedAt: new Date().toISOString()
              }),
            },
          });

          console.log("‚úÖ Transaction created successfully:", transaction.id);
          console.log(`üéØ Successfully processed payment for user ${userId}: ${tokenAmount} tokens (${paymentAmount} ${region === 'UK' ? 'GBP' : 'EUR'})`);

        } catch (error) {
          console.error("‚ùå Failed to process payment:", error);
          return NextResponse.json({ error: "Failed to process payment" }, { status: 500 });
        }
        break;

      case "payment_intent.succeeded":
        console.log("üí≥ Payment Intent succeeded:", event.data.object.id);
        break;

      case "payment_intent.payment_failed":
        console.log("‚ùå Payment Intent failed:", event.data.object.id);
        break;

      default:
        console.warn(`ü§∑‚Äç‚ôÄÔ∏è Unhandled event type: ${event.type}`);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Stripe –æ—Ç–≤–µ—Ç, —á—Ç–æ –≤—Å–µ –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ
    return NextResponse.json({ received: true });

  } catch (error) {
    console.error("=== WEBHOOK ERROR ===", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}

// GET –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
export async function GET() {
  return NextResponse.json({ 
    message: "Webhook endpoint is active. Please use POST for Stripe events.",
    timestamp: new Date().toISOString(),
    status: "ready"
  });
}