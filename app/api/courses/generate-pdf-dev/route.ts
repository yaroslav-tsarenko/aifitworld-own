import { NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";
import { writeFileSync, mkdirSync } from "fs";
import { join } from "path";

export async function POST(req: Request) {
  console.log("PDF generation API called");
  
  const session = await getServerSession(authOptions);
  if (!session?.user?.id) {
    console.log("Unauthorized access attempt");
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  try {
    const body = await req.json();
    const { courseId } = body;
    console.log("Generating PDF for course:", courseId);

    if (!courseId) {
      return NextResponse.json({ error: "Course ID is required" }, { status: 400 });
    }

    // Получаем курс из базы данных
    const course = await prisma.course.findFirst({
      where: {
        id: courseId,
        userId: session.user.id,
      },
      select: {
        id: true,
        title: true,
        options: true,
        createdAt: true,
        tokensSpent: true,
      },
    });

    if (!course) {
      console.log("Course not found:", courseId);
      return NextResponse.json({ error: "Course not found" }, { status: 404 });
    }

    console.log("Course found:", course.title);

    // Создаем простой HTML для PDF (временно)
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>${course.title || "Untitled Course"}</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          .header { border-bottom: 2px solid #fbbf24; padding-bottom: 20px; margin-bottom: 30px; }
          .title { font-size: 28px; font-weight: bold; color: #0E0E10; margin-bottom: 10px; }
          .subtitle { font-size: 16px; color: #6b7280; margin-bottom: 20px; }
          .info-section { margin-bottom: 30px; }
          .info-title { font-size: 18px; font-weight: bold; color: #0E0E10; margin-bottom: 15px; border-bottom: 1px solid #e5e7eb; padding-bottom: 8px; }
          .info-grid { display: flex; justify-content: space-between; margin-bottom: 10px; }
          .info-label { font-size: 12px; color: #6b7280; font-weight: 500; }
          .info-value { font-size: 12px; color: #0E0E10; font-weight: 500; }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="title">${course.title || "Untitled Course"}</div>
          <div class="subtitle">Personalized fitness program generated by AI</div>
        </div>
        
        <div class="info-section">
          <div class="info-title">Program Details</div>
          <div class="info-grid">
            <span class="info-label">Created:</span>
            <span class="info-value">${new Date(course.createdAt).toLocaleDateString()}</span>
          </div>
          <div class="info-grid">
            <span class="info-label">Tokens spent:</span>
            <span class="info-value">${course.tokensSpent} ◎</span>
          </div>
        </div>
      </body>
      </html>
    `;

    // Создаем папку для PDF если её нет
    const pdfDir = join(process.cwd(), "public", "pdfs");
    try {
      mkdirSync(pdfDir, { recursive: true });
    } catch {
      // Папка уже существует
    }

    // Сохраняем HTML файл (временно вместо PDF)
    const filename = `course-${courseId}-${Date.now()}.html`;
    const filePath = join(pdfDir, filename);
    writeFileSync(filePath, htmlContent, 'utf8');
    console.log("HTML file saved to:", filePath);

    // Создаем URL для файла
    const fileUrl = `/pdfs/${filename}`;

    // Обновляем курс с URL файла
    await prisma.course.update({
      where: { id: courseId },
      data: { pdfUrl: fileUrl },
    });
    console.log("Course updated with file URL:", fileUrl);

    return NextResponse.json({
      success: true,
      pdfUrl: fileUrl,
      filename,
      note: "HTML file generated (PDF generation will be implemented later)"
    });

  } catch (error) {
    console.error("File generation failed:", error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    return NextResponse.json(
      { error: "Failed to generate file: " + errorMessage },
      { status: 500 }
    );
  }
}
