generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // PostgreSQL для production
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  courses       Course[]
  previews      Preview[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  tokens        Int           @default(0)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// доменные сущности 
model Transaction {
  id        String   @id @default(cuid())
  userId    String
  type      String // "topup" | "spend"
  amount    Int // в токенах; положительное число
  meta      String? // JSON-строка
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Course {
  id              String   @id @default(cuid())
  userId          String
  title           String?
  options         String // JSON-строка
  tokensSpent     Int
  pdfUrl          String?
  content         String? // Сгенерированный план тренировок
  images          String? // JSON-строка с URL изображений
  nutritionAdvice String? // Советы по питанию
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Preview {
  id          String   @id @default(cuid())
  userId      String
  options     String // JSON-строка
  tokensSpent Int
  result      String? // JSON-строка
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}
